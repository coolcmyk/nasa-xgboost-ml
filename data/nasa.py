# -*- coding: utf-8 -*-
"""NASA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15oLGMOqvE8SkvfujIVVGZyLaXgMLQywa
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install faker
# %pip install xgboost
# %pip install pandas
# %pip install numpy

# Commented out IPython magic to ensure Python compatibility.
# %pip install scikit-learn

import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
# Load the synthetic data


data_rf = pd.read_csv("rainfall_monthly_2023_2024.csv")
data_sw = pd.read_csv("soil_water_2023_2024.csv")
data_sr = pd.read_csv("solar_radiation_2023_2024.csv")
data_temp = pd.read_csv("temperature_monthly_2023_2024.csv")
data_fruit = pd.read_csv("fruit-new.csv")
data_vegetable = pd.read_csv("vegetable-new.csv")

data_rf.head()

#Clean data and fill with 0
data_rf = data_rf.fillna(0)
data_sw = data_sw.fillna(0)
data_sr = data_sr.fillna(0)
data_temp = data_temp.fillna(0)
data_fruit = data_fruit.fillna(0)
data_vegetable = data_vegetable.fillna(0)

# Split the data into training and testing sets
X_rf = data_rf[["longitude", "latitude"]]
y_rf = data_rf[["tp"]]

X_train, X_test, y_train, y_test = train_test_split(X_rf, y_rf, test_size=0.2, random_state=42)

data_sw.head()

# Split the data into training and testing sets
X_sw = data_sw[["longitude", "latitude"]]
y_sw = data_sw[["swvl2"]]

X_train_sw, X_test_sw, y_train_sw, y_test_sw = train_test_split(X_sw, y_sw, test_size=0.2, random_state=42)

data_sr.head()

# Split the data into training and testing sets
X_sr = data_sr[["longitude", "latitude"]]
y_sr = data_sr[["ssr"]]

X_train_sr, X_test_sr, y_train_sr, y_test_sr = train_test_split(X_sr, y_sr, test_size=0.2, random_state=42)

data_temp.head()

# Split the data into training and testing sets
X_temp = data_temp[["longitude", "latitude"]]
y_temp = data_temp[["t2m"]]

X_train_temp, X_test_temp, y_train_temp, y_test_temp = train_test_split(X_temp, y_temp, test_size=0.2, random_state=42)

data_fruit.head()

"""**FRUIT**"""

# Split the data into training and testing sets
X_banana = data_fruit[["Year", "Month"]]
y_banana = data_fruit[["Banana Price (IDR)"]]

X_train_banana, X_test_banana, y_train_banana, y_test_banana = train_test_split(X_banana, y_banana, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_mango = data_fruit[["Year", "Month"]]
y_mango = data_fruit[["Mango Price (IDR)"]]

X_train_mango, X_test_mango, y_train_mango, y_test_mango = train_test_split(X_mango, y_mango, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_apple = data_fruit[["Year", "Month"]]
y_apple = data_fruit[["Apple Price (IDR)"]]

X_train_apple, X_test_apple, y_train_apple, y_test_apple = train_test_split(X_apple, y_apple, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_orange = data_fruit[["Year", "Month"]]
y_orange = data_fruit[["Orange Price (IDR)"]]

X_train_orange, X_test_orange, y_train_orange, y_test_orange = train_test_split(X_orange, y_orange, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_papaya = data_fruit[["Year", "Month"]]
y_papaya = data_fruit[["Papaya Price (IDR)"]]

X_train_papaya, X_test_papaya, y_train_papaya, y_test_papaya = train_test_split(X_papaya, y_papaya, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_pine = data_fruit[["Year", "Month"]]
y_pine = data_fruit[["Pineapple Price (IDR)"]]

X_train_pine, X_test_pine, y_train_pine, y_test_pine = train_test_split(X_pine, y_pine, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_grapes = data_fruit[["Year", "Month"]]
y_grapes = data_fruit[["Grapes Price (IDR)"]]

X_train_grapes, X_test_grapes, y_train_grapes, y_test_grapes = train_test_split(X_grapes, y_grapes, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_watermelon = data_fruit[["Year", "Month"]]
y_watermelon = data_fruit[["Watermelon Price (IDR)"]]

X_train_watermelon, X_test_watermelon, y_train_watermelon, y_test_watermelon = train_test_split(X_watermelon, y_watermelon, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_durian = data_fruit[["Year", "Month"]]
y_durian = data_fruit[["Durian Price (IDR)"]]

X_train_durian, X_test_durian, y_train_durian, y_test_durian = train_test_split(X_durian, y_durian, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_avo = data_fruit[["Year", "Month"]]
y_avo = data_fruit[["Avocado Price (IDR)"]]

X_train_avocado, X_test_avocado, y_train_avocado, y_test_avocado = train_test_split(X_avo, y_avo, test_size=0.2, random_state=42)

"""**VEGETABLES**"""

# Split the data into training and testing sets
X_chili = data_vegetable[["Year", "Month"]]
y_chili = data_vegetable[["Chili Price (IDR)"]]

X_train_chili, X_test_chili, y_train_chili, y_test_chili = train_test_split(X_chili, y_chili, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_onion = data_vegetable[["Year", "Month"]]
y_onion = data_vegetable[["Onion Price (IDR)"]]

X_train_onion, X_test_onion, y_train_onion, y_test_onion = train_test_split(X_onion, y_onion, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_spinach = data_vegetable[["Year", "Month"]]
y_spinach = data_vegetable[["Spinach Price (IDR)"]]

X_train_spinach, X_test_spinach, y_train_spinach, y_test_spinach = train_test_split(X_spinach, y_spinach, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_carrot = data_vegetable[["Year", "Month"]]
y_carrot = data_vegetable[["Carrot Price (IDR)"]]

X_train_carrot, X_test_carrot, y_train_carrot, y_test_carrot = train_test_split(X_carrot, y_carrot, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_tomato = data_vegetable[["Year", "Month"]]
y_tomato = data_vegetable[["Tomato Price (IDR)"]]

X_train_tomato, X_test_tomato, y_train_tomato, y_test_tomato = train_test_split(X_tomato, y_tomato, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_cabbage = data_vegetable[["Year", "Month"]]
y_cabbage = data_vegetable[["Cabbage Price (IDR)"]]

X_train_cabbage, X_test_cabbage, y_train_cabbage, y_test_cabbage = train_test_split(X_cabbage, y_cabbage, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_potato = data_vegetable[["Year", "Month"]]
y_potato = data_vegetable[["Potato Price (IDR)"]]

X_train_potato, X_test_potato, y_train_potato, y_test_potato = train_test_split(X_potato, y_potato, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_garlic = data_vegetable[["Year", "Month"]]
y_garlic = data_vegetable[["Garlic Price (IDR)"]]

X_train_garlic, X_test_garlic, y_train_garlic, y_test_garlic = train_test_split(X_garlic, y_garlic, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_eggplant = data_vegetable[["Year", "Month"]]
y_eggplant = data_vegetable[["Eggplant Price (IDR)"]]

X_train_eggplant, X_test_eggplant, y_train_eggplant, y_test_eggplant = train_test_split(X_eggplant, y_eggplant, test_size=0.2, random_state=42)

# Split the data into training and testing sets
X_cucumber = data_vegetable[["Year", "Month"]]
y_cucumber = data_vegetable[["Cucumber Price (IDR)"]]

X_train_cucumber, X_test_cucumber, y_train_cucumber, y_test_cucumber = train_test_split(X_cucumber, y_cucumber, test_size=0.2, random_state=42)

# Create an XGBoost regressor
model_rf = xgb.XGBRegressor()

# Train the model
model_rf.fit(X_train, y_train)

# Make predictions on the testing set
y_pred_rf = model_rf.predict(X_test)

# Evaluate the model
mse_rf = mean_squared_error(y_test, y_pred_rf)
print("Mean Squared Error RF:", mse_rf)

# Create an XGBoost regressor
model_sw = xgb.XGBRegressor()

# Train the model
model_sw.fit(X_train_sw, y_train_sw)

# Make predictions on the testing set
y_pred_sw = model_sw.predict(X_test_sw)

# Evaluate the model
mse_sw = mean_squared_error(y_test_sw, y_pred_sw)
print("Mean Squared Error SW:", mse_sw)

# Create an XGBoost regressor
model_sr = xgb.XGBRegressor()

# Train the model
model_sr.fit(X_train_sr, y_train_sr)

# Make predictions on the testing set
y_pred_sr = model_sr.predict(X_test_sr)

# Evaluate the model
mse_sr = mean_squared_error(y_test_sr, y_pred_sr)
print("Mean Squared Error SW:", mse_sr)

# Create an XGBoost regressor
model_temp = xgb.XGBRegressor()

# Train the model
model_temp.fit(X_train_temp, y_train_temp)

# Make predictions on the testing set
y_pred_temp = model_temp.predict(X_test_temp)

# Evaluate the model
mse_temp = mean_squared_error(y_test_temp, y_pred_temp)
print("Mean Squared Error SW:", mse_temp)

y_pred_temp

"""**FRUIT**"""

# Create an XGBoost regressor
model_banana = xgb.XGBRegressor()

# Train the model
model_banana.fit(X_train_banana, y_train_banana)

# Make predictions on the testing set
y_pred_banana = model_banana.predict(X_test_banana)

# Evaluate the model
mse_banana = mean_squared_error(y_test_banana, y_pred_banana)
print("Mean Squared Error RF:", mse_banana)

# Create an XGBoost regressor
model_mango = xgb.XGBRegressor()

# Train the model
model_mango.fit(X_mango, y_mango)

# Make predictions on the testing set
y_pred_mango = model_mango.predict(X_test_mango)

# Evaluate the model
mse_mango = mean_squared_error(y_test_mango, y_pred_mango)
print("Mean Squared Error RF:", mse_mango)

# Create an XGBoost regressor
model_apple = xgb.XGBRegressor()

# Train the model
model_apple.fit(X_apple, y_apple)

# Make predictions on the testing set
y_pred_apple = model_apple.predict(X_test_apple)

# Evaluate the model
mse_apple = mean_squared_error(y_test_apple, y_pred_apple)
print("Mean Squared Error RF:", mse_apple)

# Create an XGBoost regressor
model_orange = xgb.XGBRegressor()

# Train the model
model_orange.fit(X_orange, y_orange)

# Make predictions on the testing set
y_pred_orange = model_orange.predict(X_test_orange)

# Evaluate the model
mse_orange = mean_squared_error(y_test_orange, y_pred_orange)
print("Mean Squared Error RF:", mse_orange)

# Create an XGBoost regressor
model_papaya = xgb.XGBRegressor()

# Train the model
model_papaya.fit(X_papaya, y_papaya)

# Make predictions on the testing set
y_pred_papaya = model_papaya.predict(X_test_papaya)

# Evaluate the model
mse_papaya = mean_squared_error(y_test_papaya, y_pred_papaya)
print("Mean Squared Error RF:", mse_papaya)

# Create an XGBoost regressor
model_pineapple = xgb.XGBRegressor()

# Train the model
model_pineapple.fit(X_pine, y_pine)

# Make predictions on the testing set
y_pred_pine = model_papaya.predict(X_test_pine)

# Evaluate the model
mse_pine = mean_squared_error(y_test_pine, y_pred_pine)
print("Mean Squared Error RF:", mse_pine)

# Create an XGBoost regressor
model_grapes = xgb.XGBRegressor()

# Train the model
model_grapes.fit(X_grapes, y_grapes)

# Make predictions on the testing set
y_pred_grapes = model_grapes.predict(X_test_grapes)

# Evaluate the model
mse_grapes = mean_squared_error(y_test_grapes, y_pred_grapes)
print("Mean Squared Error RF:", mse_grapes)

# Create an XGBoost regressor
model_watermelon = xgb.XGBRegressor()

# Train the model
model_watermelon.fit(X_grapes, y_grapes)

# Make predictions on the testing set
y_pred_watermelon = model_watermelon.predict(X_test_watermelon)

# Evaluate the model
mse_watermelon = mean_squared_error(y_test_watermelon, y_pred_watermelon)
print("Mean Squared Error RF:", mse_watermelon)

# Create an XGBoost regressor
model_durian = xgb.XGBRegressor()

# Train the model
model_durian.fit(X_durian, y_durian)

# Make predictions on the testing set
y_pred_durian = model_watermelon.predict(X_test_durian)

# Evaluate the model
mse_durian = mean_squared_error(y_test_durian, y_pred_durian)
print("Mean Squared Error RF:", mse_durian)

# Create an XGBoost regressor
model_avocado = xgb.XGBRegressor()

# Train the model
model_avocado.fit(X_avo, y_avo)

# Make predictions on the testing set
y_pred_avocado = model_watermelon.predict(X_test_avocado)

# Evaluate the model
mse_avocado = mean_squared_error(y_test_avocado, y_pred_avocado)
print("Mean Squared Error RF:", mse_avocado)

"""**VEGETABLE**"""

# Create an XGBoost regressor
model_chili = xgb.XGBRegressor()

# Train the model
model_chili.fit(X_chili, y_chili)

# Make predictions on the testing set
y_pred_chili = model_watermelon.predict(X_test_chili)

# Evaluate the model
mse_chili = mean_squared_error(y_test_chili, y_pred_chili)
print("Mean Squared Error RF:", mse_chili)

# Create an XGBoost regressor
model_onion = xgb.XGBRegressor()

# Train the model
model_onion.fit(X_onion, y_onion)

# Make predictions on the testing set
y_pred_onion = model_watermelon.predict(X_test_onion)

# Evaluate the model
mse_onion = mean_squared_error(y_test_onion, y_pred_onion)
print("Mean Squared Error RF:", mse_onion)

# Create an XGBoost regressor
model_spinach = xgb.XGBRegressor()

# Train the model
model_spinach.fit(X_spinach, y_spinach)

# Make predictions on the testing set
y_pred_spinach  = model_spinach.predict(X_test_spinach)

# Evaluate the model
mse_spinach = mean_squared_error(y_test_spinach, y_pred_spinach)
print("Mean Squared Error RF:", mse_spinach)

# Create an XGBoost regressor
model_carrot = xgb.XGBRegressor()

# Train the model
model_carrot.fit(X_carrot, y_carrot)

# Make predictions on the testing set
y_pred_carrot  = model_carrot.predict(X_test_carrot)

# Evaluate the model
mse_carrot = mean_squared_error(y_test_carrot, y_pred_carrot)
print("Mean Squared Error RF:", mse_carrot)

# Create an XGBoost regressor
model_tomato = xgb.XGBRegressor()

# Train the model
model_tomato.fit(X_tomato, y_tomato)

# Make predictions on the testing set
y_pred_tomato  = model_tomato.predict(X_test_tomato)

# Evaluate the model
mse_tomato = mean_squared_error(y_test_tomato, y_pred_tomato)
print("Mean Squared Error RF:", mse_tomato)

# Create an XGBoost regressor
model_cabbage = xgb.XGBRegressor()

# Train the model
model_cabbage.fit(X_cabbage, y_cabbage)

# Make predictions on the testing set
y_pred_cabbage = model_cabbage.predict(X_test_cabbage)

# Evaluate the model
mse_cabbage = mean_squared_error(y_test_cabbage, y_pred_cabbage)
print("Mean Squared Error RF:", mse_cabbage)

# Create an XGBoost regressor
model_potato = xgb.XGBRegressor()

# Train the model
model_potato.fit(X_potato, y_potato)

# Make predictions on the testing set
y_pred_potato = model_potato.predict(X_test_potato)

# Evaluate the model
mse_potato = mean_squared_error(y_test_potato, y_pred_potato)
print("Mean Squared Error RF:", mse_potato)

# Create an XGBoost regressor
model_garlic = xgb.XGBRegressor()

# Train the model
model_garlic.fit(X_garlic, y_garlic)

# Make predictions on the testing set
y_pred_garlic = model_garlic.predict(X_test_garlic)

# Evaluate the model
mse_potato = mean_squared_error(y_test_garlic, y_pred_garlic)
print("Mean Squared Error RF:", mse_potato)

# Create an XGBoost regressor
model_eggplant = xgb.XGBRegressor()

# Train the model
model_eggplant.fit(X_eggplant, y_eggplant)

# Make predictions on the testing set
y_pred_eggplant = model_eggplant.predict(X_test_eggplant)

# Evaluate the model
mse_eggplant = mean_squared_error(y_test_eggplant, y_pred_eggplant)
print("Mean Squared Error RF:", mse_eggplant)

# Create an XGBoost regressor
model_cucumber = xgb.XGBRegressor()

# Train the model
model_cucumber.fit(X_cucumber, y_cucumber)

# Make predictions on the testing set
y_pred_cucumber = model_cucumber.predict(X_test_cucumber)

# Evaluate the model
mse_cucumber = mean_squared_error(y_test_cucumber, y_pred_cucumber)
print("Mean Squared Error RF:", mse_cucumber)

# Save the model

import joblib

joblib.dump(model_rf, 'rf_model.joblib')
joblib.dump(model_sw, 'sw_model.joblib')
joblib.dump(model_sr, 'sr_model.joblib')
joblib.dump(model_temp, 'temp_model.joblib')
joblib.dump(model_banana, 'banana_model.joblib')
joblib.dump(model_mango, 'mango_model.joblib')
joblib.dump(model_apple, 'apple_model.joblib')
joblib.dump(model_orange, 'orange_model.joblib')
joblib.dump(model_papaya, 'papaya_model.joblib')
joblib.dump(model_pineapple, 'pineapple_model.joblib')
joblib.dump(model_grapes, 'grapes_model.joblib')
joblib.dump(model_watermelon, 'watermelon_model.joblib')
joblib.dump(model_durian, 'durian_model.joblib')
joblib.dump(model_avocado, 'avocado_model.joblib')
joblib.dump(model_chili, 'chili_model.joblib')
joblib.dump(model_onion, 'onion_model.joblib')
joblib.dump(model_spinach, 'spinach_model.joblib')
joblib.dump(model_carrot, 'carrot_model.joblib')
joblib.dump(model_tomato, 'tomato_model.joblib')
joblib.dump(model_cabbage, 'cabbage_model.joblib')
joblib.dump(model_potato, 'potato_model.joblib')
joblib.dump(model_garlic, 'garlic_model.joblib')
joblib.dump(model_eggplant, 'eggplant_model.joblib')
joblib.dump(model_cucumber, 'cucumber_model.joblib')


# Load the model (simulating a new session)
model_rf = joblib.load('rf_model.joblib')
model_sw = joblib.load('sw_model.joblib')
model_sr = joblib.load('sr_model.joblib')
model_temp = joblib.load('temp_model.joblib')
model_banana = joblib.load('banana_model.joblib')
model_mango = joblib.load('mango_model.joblib')
model_apple = joblib.load('apple_model.joblib')
model_orange = joblib.load('orange_model.joblib')
model_papaya = joblib.load('papaya_model.joblib')
model_pineapple = joblib.load('pineapple_model.joblib')
model_grapes = joblib.load('grapes_model.joblib')
model_watermelon = joblib.load('watermelon_model.joblib')
model_durian = joblib.load('durian_model.joblib')
model_avocado = joblib.load('avocado_model.joblib')
model_chili = joblib.load('chili_model.joblib')
model_onion = joblib.load('onion_model.joblib')
model_spinach = joblib.load('spinach_model.joblib')
model_carrot = joblib.load('carrot_model.joblib')
model_tomato = joblib.load('tomato_model.joblib')
model_cabbage = joblib.load('cabbage_model.joblib')
model_potato = joblib.load('potato_model.joblib')
model_garlic = joblib.load('garlic_model.joblib')
model_eggplant = joblib.load('eggplant_model.joblib')
model_cucumber = joblib.load('cucumber_model.joblib')

import numpy as np

# Generate 100 random test cases for longitude and latitude
# You can customize the range of longitudes and latitudes as per your dataset's geography
long_min, long_max = -180, 180
lat_min, lat_max = -90, 90
test_cases = np.column_stack((np.random.uniform(low=long_min, high=long_max, size=1),
                              np.random.uniform(low=lat_min, high=lat_max, size=1)))

# Make predictions for 100 test cases for fruit and vegetables which accept the year and month as input
# You can customize the year and month as per your dataset

import numpy as np

def generate_month_year_pairs(num_samples=1, start_year=2023, end_year=2024):
    # Generate random years
    years = np.random.randint(start_year, end_year + 1, num_samples)

    # Generate random months (1-12)
    months = np.random.randint(1, 13, num_samples)

    # Combine years and months
    fruitAndVegetablesTestCases = np.column_stack((months, years))

    return fruitAndVegetablesTestCases

# Example usage
year_cases = generate_month_year_pairs()
# year_cases = 1, 2023
# print(test_cases[:10])  # Print first 10 pairs as an example


predictions_rf = model_rf.predict(test_cases)
predictions_sw = model_sw.predict(test_cases)
predictions_sr = model_sr.predict(test_cases)
predictions_temp = model_temp.predict(test_cases)
predictions_banana = model_banana.predict(year_cases)
predictions_mango = model_mango.predict(year_cases)
predictions_apple = model_apple.predict(year_cases)
predictions_orange = model_orange.predict(year_cases)
predictions_papaya = model_papaya.predict(year_cases)
predictions_pineapple = model_pineapple.predict(year_cases)
predictions_grapes = model_grapes.predict(year_cases)
predictions_watermelon = model_watermelon.predict(year_cases)
predictions_durian = model_durian.predict(year_cases)
predictions_avocado = model_avocado.predict(year_cases)
predictions_chili = model_chili.predict(year_cases)
predictions_onion = model_onion.predict(year_cases)
predictions_spinach = model_spinach.predict(year_cases)
predictions_carrot = model_carrot.predict(year_cases)
predictions_tomato = model_tomato.predict(year_cases)
predictions_cabbage = model_cabbage.predict(year_cases)
predictions_potato = model_potato.predict(year_cases)
predictions_garlic = model_garlic.predict(year_cases)
predictions_eggplant = model_eggplant.predict(year_cases)
predictions_cucumber = model_cucumber.predict(year_cases)



# Convert t2m from Kelvin to Celsius

predictions_rf



# # Combine the predictions into a DataFrame for better visualization
# predictions_df = pd.DataFrame({
#     'Longitude': test_cases[:, 0],
#     'Latitude': test_cases[:, 1],
#     'Predicted_Rainfall': predictions_rf,
#     'Predicted_Soil_Moisture': predictions_sw,
#     'Predicted_Surface_Runoff': predictions_sr,
#     'Predicted_Temperature': predictions_temp
# })

# # Convert t2m from Kelvin to Celsius
# predictions_df['Predicted_Temperature_Celsius'] = predictions_df['Predicted_Temperature'] - 273.15


# # Display the first few rows of the dataframe
# predictions_df.head(1000)

# # # # Optionally, save the results to a CSV file
# # predictions_df.to_csv('data/predictions.csv', index=False)

# import pandas as pd
# import numpy as np



# fruitAndVegetablePredictions = {
#     'banana' : predictions_banana,
#     'mango' : predictions_mango,
#     'apple' : predictions_apple,
#     'orange' : predictions_orange,
#     'papaya' : predictions_papaya,
#     'pineapple' : predictions_pineapple,
#     'grapes' : predictions_grapes,
#     'watermelon' : predictions_watermelon,
#     'durian' : predictions_durian,
#     'avocado' : predictions_avocado,
#     'chili' : predictions_chili,
#     'onion' : predictions_onion,
#     'spinach' : predictions_spinach,
#     'carrot' : predictions_carrot,
#     'tomato' : predictions_tomato,
#     'cabbage' : predictions_cabbage,
#     'potato' : predictions_potato,
#     'garlic' : predictions_garlic,
#     'eggplant' : predictions_eggplant,
#     'cucumber' : predictions_cucumber
#     }

# def ranking_top5(fruitAndVegetablePredictions):
#     top5 = []
#     for i in range(5):
#         max = 0
#         for fruit in fruitAndVegetablePredictions:
#             if int(fruit) > max:
#                 max = fruit
#         top5.append(max)
#         fruitAndVegetablePredictions.remove(max)
#     return top5

# def get_predictions_json(test_cases, predictions_rf, predictions_sw, predictions_sr, predictions_temp):
#     """
#     This function generates a DataFrame from prediction data and returns it as a JSON.

#     Parameters:
#     - test_cases: a numpy array with latitude and longitude test cases.
#     - predictions_rf: predicted rainfall data (numpy array or list).
#     - predictions_sw: predicted soil moisture data (numpy array or list).
#     - predictions_sr: predicted surface runoff data (numpy array or list).
#     - predictions_temp: predicted temperature data (numpy array or list).

#     Returns:
#     - JSON formatted string of predictions.
#     """
#     # Create DataFrame
#     # predictions_df = pd.DataFrame({
#     #     'Longitude': test_cases[:, 0],
#     #     'Latitude': test_cases[:, 1],
#     #     'Predicted_Rainfall': predictions_rf,
#     #     'Predicted_Soil_Moisture': predictions_sw,
#     #     'Predicted_Solar_Radiation': predictions_sr,
#     #     'Predicted_Temperature': predictions_temp
#     # })


#     # Convert temperature from Kelvin to Celsius
#     # predictions_df['Predicted_Temperature_Celsius'] = predictions_df['Predicted_Temperature'] - 273.15

#     # PSI = Plant suitability index
#     W1 = 1
#     W2 = 2
#     W3 = 3
#     W4 = 4

#     predictions_rf = predictions_rf[0]
#     predictions_sw = predictions_sw[0]
#     predictions_sr = predictions_sr[0]
#     predictions_temp = predictions_temp[0]


#     predictions_df = pd.DataFrame({
#         'Longitude': test_cases[:, 0],
#         'Latitude': test_cases[:, 1],
#         'PSI': (predictions_rf*W1 + predictions_sw*W2 + predictions_sr*W3 + (predictions_temp - 273,15)*W4),
#         'TOP_5': ranking_top5(fruitAndVegetablePredictions)
#         # TODO: TESTING
#     })


#     # Convert DataFrame to JSON
#     json_output = predictions_df.to_json(orient="records", indent=2)

#     return json_output

# # Example usage
# json_output = get_predictions_json(test_cases, predictions_rf, predictions_sw, predictions_sr, predictions_temp)
# print(json_output)

import numpy as np


def ranking_top5(fruitAndVegetablePredictions):
    # Convert predictions to mean values if they're arrays
    mean_predictions = {fruit: np.mean(pred) if isinstance(pred, np.ndarray) else pred
                        for fruit, pred in fruitAndVegetablePredictions.items()}

    # Sort the items by their prediction values in descending order
    sorted_items = sorted(mean_predictions.items(), key=lambda x: x[1], reverse=True)

    # Return the top 5 fruit names
    return [item[0] for item in sorted_items[:5]]

def get_predictions_json(test_cases, predictions_rf, predictions_sw, predictions_sr, predictions_temp, fruitAndVegetablePredictions):
    # Ensure all inputs are numpy arrays and get the first element if they're 2D
    predictions_rf = np.array(predictions_rf).flatten()[0]
    predictions_sw = np.array(predictions_sw).flatten()[0]
    predictions_sr = np.array(predictions_sr).flatten()[0]
    predictions_temp = np.array(predictions_temp).flatten()[0]

    # Define weights
    W1, W2, W3, W4 = 1, 2, 3, 4  # Adjust these as needed

    # Calculate PSI
    psi = (predictions_rf * W1 +
           predictions_sw * W2 +
           predictions_sr * W3 +
           (predictions_temp - 273.15) * W4)  # Note the decimal point, not comma

    # Get top 5 rankings
    top_5 = ranking_top5(fruitAndVegetablePredictions)

    # Create DataFrame
    predictions_df = pd.DataFrame({
        'Longitude': test_cases[:, 0],
        'Latitude': test_cases[:, 1],
        'PSI': [psi] * len(test_cases),  # Replicate PSI for each test case
        'TOP_5': [top_5] * len(test_cases)  # Replicate TOP_5 for each test case
        # 'TS': [time.time()] * len(test_cases)  # Replicate TS for each test case
    })

    # Convert DataFrame to JSON
    json_output = predictions_df.to_json(orient="records", indent=2)

    return json_output

# Example usage
json_output = get_predictions_json(test_cases, predictions_rf, predictions_sw, predictions_sr, predictions_temp, fruitAndVegetablePredictions)
print(json_output)